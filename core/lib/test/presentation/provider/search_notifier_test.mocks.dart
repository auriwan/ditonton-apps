// Mocks generated by Mockito 5.0.16 from annotations
// in ditonton_apps/test/presentation/provider/search_notifier_test.dart.
// Do not manually edit this file.

import 'dart:async' as i6;

import 'package:dartz/dartz.dart' as i3;
import 'package:core/common/failure.dart' as i7;
import 'package:core/domain/entities/movie.dart' as i8;
import 'package:core/domain/entities/tv_show.dart' as i10;
import 'package:core/domain/repositories/movie_repository.dart' as i2;
import 'package:core/domain/repositories/tv_show_repository.dart' as i4;
import 'package:core/domain/usecases/movie/search_movies.dart' as i5;
import 'package:core/domain/usecases/tv_show/search_tv_shows.dart' as i9;
import 'package:mockito/mockito.dart' as i1;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeMovieRepository_0 extends i1.Fake implements i2.MovieRepository {}

class _FakeEither_1<L, R> extends i1.Fake implements i3.Either<L, R> {}

class _FakeTVShowRepository_2 extends i1.Fake implements i4.TvRepository {
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends i1.Mock implements i5.SearchMovies {
  MockSearchMovies() {
    i1.throwOnMissingStub(this);
  }

  @override
  i2.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_0()) as i2.MovieRepository);
  @override
  i6.Future<i3.Either<i7.Failure, List<i8.Movie>>> execute(String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
          returnValue: Future<i3.Either<i7.Failure, List<i8.Movie>>>.value(
              _FakeEither_1<i7.Failure, List<i8.Movie>>())) as i6
          .Future<i3.Either<i7.Failure, List<i8.Movie>>>);
}

/// A class which mocks [SearchTVShows].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchTVShows extends i1.Mock implements i9.SearchTv {
  MockSearchTVShows() {
    i1.throwOnMissingStub(this);
  }

  @override
  i4.TvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeTVShowRepository_2()) as i4.TvRepository);
  @override
  i6.Future<i3.Either<i7.Failure, List<i10.TvShow>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
          returnValue: Future<i3.Either<i7.Failure, List<i10.TvShow>>>.value(
              _FakeEither_1<i7.Failure, List<i10.TvShow>>())) as i6
          .Future<i3.Either<i7.Failure, List<i10.TvShow>>>);
}
